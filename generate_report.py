# generate_report.py
import json
import base64
from pathlib import Path
import nbformat
from nbformat.v4 import new_notebook, new_markdown_cell, new_code_cell
from pmas.main import run_full_pipeline
import pandas as pd

OUT_NB = Path("report.ipynb")
OUT_DIR = Path("outputs")
OUT_DIR.mkdir(exist_ok=True)

def encode_image_to_datauri(p: Path):
    if not p.exists():
        return None
    b = p.read_bytes()
    b64 = base64.b64encode(b).decode("utf-8")
    return f"data:image/png;base64,{b64}"

def df_to_markdown_table(df: pd.DataFrame):
    # small helper to produce a markdown table string
    if df is None or df.empty:
        return "No data."
    return df.to_markdown()

def main():
    # Run baseline
    print("Running baseline...")
    baseline = run_full_pipeline(use_mitigation=False, dataset="Adult Income", use_cache_only=True)
    print("Running reweight...")
    reweight = run_full_pipeline(use_mitigation=True, mitigation_method="reweight", dataset="Adult Income", use_cache_only=True)
    print("Running expgrad...")
    expgrad = run_full_pipeline(use_mitigation=True, mitigation_method="expgrad", dataset="Adult Income", use_cache_only=True)

    # Prepare metric tables
    overall_df = pd.DataFrame({
        "baseline": pd.Series(baseline.get("eval_metrics", {})),
        "reweight": pd.Series(reweight.get("eval_metrics", {})),
        "expgrad": pd.Series(expgrad.get("eval_metrics", {}))
    }).fillna("")

    # group metrics
    def group_to_df(g):
        rows=[]
        for metric, groups in (g or {}).items():
            for k,v in groups.items():
                rows.append({"metric":metric, "group":k, "value":v})
        if not rows: return pd.DataFrame()
        df = pd.DataFrame(rows)
        return df.pivot(index="metric", columns="group", values="value")

    group_b = group_to_df(baseline.get("group_metrics", {}))
    group_r = group_to_df(reweight.get("group_metrics", {}))
    group_e = group_to_df(expgrad.get("group_metrics", {}))

    # Paths to SHAP images (from pipeline outputs)
    shap_b = baseline.get("shap_path")
    shap_r = reweight.get("shap_path")
    shap_e = expgrad.get("shap_path")

    # Build notebook
    nb = new_notebook()
    cells = []

    cells.append(new_markdown_cell("# FairLens — Reproducible Report\nThis notebook was auto-generated by `generate_report.py`. It contains the baseline and mitigation results and SHAP plots embedded inline.\n\n**Dataset:** Adult Income (cached)"))
    # overall metrics
    cells.append(new_markdown_cell("## Overall metrics (baseline | reweight | expgrad)"))
    cells.append(new_markdown_cell(df_to_markdown_table(overall_df)))

    # group metrics
    cells.append(new_markdown_cell("## Group metrics — Baseline"))
    cells.append(new_markdown_cell(df_to_markdown_table(group_b)))
    cells.append(new_markdown_cell("## Group metrics — Reweight"))
    cells.append(new_markdown_cell(df_to_markdown_table(group_r)))
    cells.append(new_markdown_cell("## Group metrics — ExpGrad"))
    cells.append(new_markdown_cell(df_to_markdown_table(group_e)))

    # fairness gaps
    def gaps_from_group(g):
        try:
            return {
                "accuracy_gap": abs(g["accuracy"][0] - g["accuracy"][1]),
                "fpr_gap": abs(g["fpr"][0] - g["fpr"][1]),
                "fnr_gap": abs(g["fnr"][0] - g["fnr"][1]),
            }
        except Exception:
            return {}

    gaps_b = gaps_from_group(baseline.get("group_metrics", {}))
    gaps_r = gaps_from_group(reweight.get("group_metrics", {}))
    gaps_e = gaps_from_group(expgrad.get("group_metrics", {}))

    gap_df = pd.DataFrame({
        "baseline": pd.Series(gaps_b),
        "reweight": pd.Series(gaps_r),
        "expgrad": pd.Series(gaps_e)
    }).fillna("")

    cells.append(new_markdown_cell("## Fairness gaps (smaller = fairer)"))
    cells.append(new_markdown_cell(df_to_markdown_table(gap_df)))

    # Embed SHAP images
    def add_image_section(title, path):
        if not path:
            cells.append(new_markdown_cell(f"### {title}\n_No SHAP image produced._"))
            return
        datauri = encode_image_to_datauri(Path(path))
        if not datauri:
            cells.append(new_markdown_cell(f"### {title}\n_Could not find file: {path}_"))
            return
        md = f"### {title}\n\n![]({datauri})"
        cells.append(new_markdown_cell(md))

    add_image_section("Baseline SHAP", shap_b)
    add_image_section("Reweight SHAP", shap_r)
    add_image_section("ExpGrad SHAP", shap_e)

    # reproducibility cell: show exact commands used
    repro = """# Reproducibility
# To reproduce these results locally (from repo root):
# 1) Activate virtual env and install requirements: pip install -r requirements.txt
# 2) Ensure data/adult.csv is present (for offline runs)
# 3) Run the pipeline steps in Python:
from pmas.main import run_full_pipeline
b = run_full_pipeline(use_mitigation=False, dataset="Adult Income", use_cache_only=True)
r = run_full_pipeline(use_mitigation=True, mitigation_method="reweight", dataset="Adult Income", use_cache_only=True)
e = run_full_pipeline(use_mitigation=True, mitigation_method="expgrad", dataset="Adult Income", use_cache_only=True)
print("Done")
"""
    cells.append(new_code_cell(repro))

    nb['cells'] = cells
    nbformat.write(nb, str(OUT_NB))
    print(f"Wrote notebook: {OUT_NB.resolve()}")

if __name__ == "__main__":
    main()
